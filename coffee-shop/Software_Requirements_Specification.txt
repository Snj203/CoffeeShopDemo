Software Requirements Specification (SRS)
Project: Coffee Shop Management System

1. Introduction
The Coffee Shop Management System is a web-based application designed to manage the operations of a coffee shop.
It provides functionalities for managing coffee and merchandise inventory, handling purchases, and managing suppliers and coffee houses.
The system also includes user authentication and authorization features to ensure secure access.

2. Goals and Objectives
- Goal: To create a comprehensive and user-friendly application for managing a coffee shop, including inventory, sales, and user management.
- Objectives:
  - Implement CRUD operations for entities: Coffee, Merch, CoffeeInventory, Supplier, CoffeeHouse.
  - Enable users to purchase coffee and merchandise.
  - Allow administrators to replenish inventory and manage suppliers.
  - Provide secure user authentication and authorization using JWT.
  - Support multiple databases: PostgreSQL for main entities and H2 for user management.
  - Offer REST API and Spring MVC endpoints for seamless interaction.

3. Functional Requirements
    1. Coffee Management (Coffee):
       - View a list of available coffee varieties.
       - Add, edit, and delete coffee items.
       - Allow users to purchase coffee.
    2. Merchandise Management (Merch):
       - View a list of available merchandise.
       - Add, edit, and delete merchandise items.
    3. Inventory Management (CoffeeInventory):
       - View current coffee inventory levels.
       - Replenish coffee stocks.
    4. Supplier Management (Supplier):
       - View a list of suppliers.
       - Add, edit, and delete suppliers.
    5. Coffee House Management (CoffeeHouse):
       - View a list of coffee houses.
       - Add, edit, and delete coffee houses.
    6. User Management (User):
       - Allow users to register and log in.
       - Provide temporary user registration.
       - Authenticate users using JWT.
       - Manage user roles (Authority).
    7. API:
       - Provide REST API endpoints for all CRUD operations.
       - Support Spring MVC for web-based interaction.

4. Non-Functional Requirements
    1. Performance:
       - API response time should not exceed 500 ms.
    2. Security:
       - Use JWT for secure authentication.
       - Validate data on the server side.
    3. Scalability:
       - Support for two databases: PostgreSQL for main entities and H2 for user management.
    4. Testing:
       - Write unit tests for repositories, services, and controllers.
       - Conduct integration tests to verify interaction between application layers.

5. Use Cases
    1. User:
       - Register and log in to the system.
       - Browse available coffee and merchandise.
       - Purchase coffee.
    2. Administrator:
       - Manage coffee and merchandise inventory.
       - Manage suppliers and coffee houses.
       - View and manage user accounts.

6. Technical Details
- Technologies: Spring Boot, Spring Data JPA, Spring Security, JWT, PostgreSQL, H2.
- API Documentation: OpenAPI and SwaggerUI.
- Testing: JUnit, Mockito, MockMVC.

7. Database Configuration
- PostgreSQL: Used for storing main entities (Coffee, Merch, CoffeeInventory, Supplier, CoffeeHouse).
- H2: Used for user management (User, Authority).

8. Security Features
- Custom JWT-based authentication.
- Role-based access control (Authority).
- Secure storage of refresh tokens in the database.

9. Additional Features
- Preloaded data in the database using DataSourceInitializer.
- Validation of input data using Spring Validation.
- Support for both REST API and Spring MVC endpoints.

10. Testing
- Unit tests for repositories, services, and controllers.
- Integration tests to ensure seamless interaction between layers.
- Tests for exception handling and data validation.

11. API Documentation
- OpenAPI and SwaggerUI are used to generate API documentation.
- API endpoints are documented for easy reference.

12. Future Enhancements
- Implement two-factor authentication (2FA) for added security.
- Add rate limiting and IP blacklisting to prevent brute force attacks.
- Expand the merchandise section to include more categories.

